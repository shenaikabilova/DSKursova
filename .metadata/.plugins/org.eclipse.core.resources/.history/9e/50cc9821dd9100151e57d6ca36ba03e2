package ShenaiKabilova;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.SQLException;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import Other.Validate;

/**
 * 
 */

/**
 * @author shenaikabilova
 *
 */
@SuppressWarnings("serial")
public class UserInterfaceAddDriver extends JFrame implements Runnable, ActionListener, FocusListener, KeyListener {
	private JPanel panel;
	
	private JLabel labelFirstName = new JLabel("First name: ");
	private JLabel labelLastName = new JLabel("Last name: ");
	private JLabel labelLicense = new JLabel("License: ");
	private JLabel labelPassword = new JLabel("Password: ");
	private JLabel labelEgn = new JLabel("EGN: ");
	
	private JTextField textFieldFirstName = new JTextField("");
	private JTextField textFieldLastName = new JTextField("");
	private JTextField textFieldPassword = new JTextField("");
	private JTextField textFieldEgn = new JTextField("");
	
	private String[] license = {"A", "B", "C", "D", "BE", "CE", "DE", "T", "A"};
	private JComboBox<String> comboBoxLicense = new JComboBox<String>(license);
	
	private JButton buttonInsert = new JButton("Insert");
	private JButton buttonDelete = new JButton("Delete");
	private JButton buttonUpdate = new JButton("Update");
	private JButton buttonSearch = new JButton("Search");
	private JButton buttonReset = new JButton("Reset");
	private JButton buttonViewTable = new JButton("View table");
	private JButton buttonExit = new JButton("Exit");
	
	private DriverDAO driver = new DriverDaoImpl();
	
	public UserInterfaceAddDriver () {
		setTitle("Add driver");
		setSize(430, 350);
		setLocationRelativeTo(null);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		
		this.panel = new JPanel();
		panel.setLayout(null);
		this.getContentPane().add(panel);
		
		this.labelFirstName.setBounds(20, 20, 100, 30);
		panel.add(labelFirstName);
		
		this.labelLastName.setBounds(20, 50, 100, 30);
		panel.add(labelLastName);
		
		this.labelLicense.setBounds(20, 80, 100, 30);
		panel.add(labelLicense);
		
		this.labelPassword.setBounds(20, 110, 100, 30);
		panel.add(labelPassword);
		
		this.labelEgn.setBounds(20, 140, 100, 30);
		panel.add(labelEgn);
		
		this.textFieldFirstName.setBounds(100, 20, 150, 25);
		panel.add(textFieldFirstName);
		
		this.textFieldLastName.setBounds(100, 50, 150, 25);
		panel.add(textFieldLastName);
		
		this.comboBoxLicense.setBounds(100, 80, 150, 25);
		panel.add(comboBoxLicense);
		
		this.textFieldPassword.setBounds(100, 110, 150, 25);
		panel.add(textFieldPassword);
		
		this.textFieldEgn.setBounds(100, 140, 150, 25);
		panel.add(textFieldEgn);
		
		this.buttonInsert.setBounds(280, 20, 100, 30);
		panel.add(buttonInsert);
		
		this.buttonUpdate.setBounds(280, 60, 100, 30);
		panel.add(buttonUpdate);
		
		this.buttonDelete.setBounds(280, 100, 100, 30);
		panel.add(buttonDelete);
		
		this.buttonSearch.setBounds(280, 140, 100, 30);
		panel.add(buttonSearch);
		
		this.buttonReset.setBounds(280, 180, 100, 30);
		panel.add(buttonReset);
		
		this.buttonViewTable.setBounds(280, 220, 100, 30);
		panel.add(buttonViewTable);
		
		this.buttonExit.setBounds(280, 260, 100, 30);
		panel.add(buttonExit);
		
		textFieldEgn.addFocusListener(this);
		textFieldEgn.addKeyListener(this);
		buttonInsert.addActionListener(this);
		buttonUpdate.addActionListener(this);
		buttonDelete.addActionListener(this);
		buttonSearch.addActionListener(this);
		buttonViewTable.addActionListener(this);
		buttonExit.addActionListener(this);
		buttonReset.addActionListener(this);
	}
	
	/* (non-Javadoc)
	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
	 */
	@Override
	public void actionPerformed(ActionEvent arg0) {
		buttonInsert.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				Drivers addDriver = new Drivers(textFieldFirstName.getText(), 
												textFieldLastName.getText(),
												(String) comboBoxLicense.getSelectedItem(), 
												textFieldPassword.getText(),
												textFieldEgn.getText());

				try {
					if(new Validate().isvalidEGN(textFieldEgn.getText()) == false){
							JOptionPane.showMessageDialog(UserInterfaceAddDriver.this, "Error" + new SQLException(), "Wrong EGN!", JOptionPane.ERROR_MESSAGE);
					}
					else{						
						driver.insert(addDriver);
						JOptionPane.showMessageDialog(UserInterfaceAddDriver.this, "Add - success!", "Correct", JOptionPane.OK_OPTION);
					}
				} catch (Exception e1) {
					JOptionPane.showMessageDialog(UserInterfaceAddDriver.this, "Error: " + e1.getMessage().toString(), "Unique constraint",
							JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		
		buttonUpdate.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				Drivers updateDriver = new Drivers(textFieldFirstName.getText(), textFieldLastName.getText(),
												   (String) comboBoxLicense.getSelectedItem(), 
												    textFieldPassword.getText(),
												    textFieldEgn.getText());
				driver.update(updateDriver);
				
				JOptionPane.showMessageDialog(null, "Update - success!", "Correct", JOptionPane.OK_OPTION);
			}
		});
		
		buttonDelete.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				driver.delete(textFieldEgn.getText());
				
				JOptionPane.showMessageDialog(null, "Delete - success!", "Correct", JOptionPane.OK_OPTION);
			}
		});
		
		buttonViewTable.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				new CreateTableDrivers().setVisible(true);
			}
		});
		
		buttonSearch.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				Drivers d = driver.search(textFieldEgn.getText());
				
				textFieldFirstName.setText(d.getDriverFirstName());
				textFieldLastName.setText(d.getDriverLastName());
				comboBoxLicense.setSelectedItem(d.getDriverLicense());
				textFieldPassword.setText(d.getPassword());
			}
		});
		
		buttonReset.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				textFieldFirstName.setText("");
				textFieldLastName.setText("");
				comboBoxLicense.setSelectedItem(1);
				textFieldPassword.setText("");
				textFieldEgn.setText("");
			}
		});
		
		buttonExit.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				dispose();
				new UserInterface().setVisible(true);
			}
		});
	}

	/* (non-Javadoc)
	 * @see java.lang.Runnable#run()
	 */
	@Override
	public void run() {
		setVisible(true);
	}

	/* (non-Javadoc)
	 * @see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)
	 */
	@Override
	public void focusGained(FocusEvent e) {
		
	}

	/* (non-Javadoc)
	 * @see java.awt.event.FocusListener#focusLost(java.awt.event.FocusEvent)
	 */
	@Override
	public void focusLost(FocusEvent e) {
		try {
			if(textFieldEgn.getText().length()!=10){
				JOptionPane.showMessageDialog(UserInterfaceAddDriver.this, "EGN must be with 10 numbers!", "Error", 
						JOptionPane.ERROR_MESSAGE);
			}
		} catch (NumberFormatException e1) {
			JOptionPane.showMessageDialog(UserInterfaceAddDriver.this, "Must be numbers", "Invalid EGN", 
					JOptionPane.ERROR_MESSAGE);
		} catch (Exception e1) {
			JOptionPane.showMessageDialog(UserInterfaceAddDriver.this, "Invalid EGN", "Invalid EGN", 
					JOptionPane.ERROR_MESSAGE);
		}
	}

	/* (non-Javadoc)
	 * @see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)
	 */
	@Override
	public void keyPressed(KeyEvent e) {
//		if (e.getKeyChar() >= '0' && e.getKeyChar() <= '9') {
//			textFieldEgn.setEditable(true);
//		} else {
//		    textFieldEgn.setEditable(false);    
//		}
	}

	/* (non-Javadoc)
	 * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)
	 */
	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	/* (non-Javadoc)
	 * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)
	 */
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
}